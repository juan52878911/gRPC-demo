---
- name: Check if node is already registered (system-agent)
  systemd:
    name: rancher-system-agent
  register: agent_check
  ignore_errors: yes

- name: Display registration status
  debug:
    msg: "Node already registered with Rancher (system-agent running)"
  when: agent_check.status is defined and agent_check.status.ActiveState == "active"

- name: Wait for registration command file on master
  stat:
    path: /home/ubuntu/cluster-registration-cmd.sh
  delegate_to: "{{ groups['master'][0] }}"
  register: master_reg_file
  retries: 30
  delay: 10
  until: master_reg_file.stat.exists | default(false)
  when: agent_check.status is not defined or agent_check.status.ActiveState != "active"

- name: Fetch registration command from master
  slurp:
    src: /home/ubuntu/cluster-registration-cmd.sh
  delegate_to: "{{ groups['master'][0] }}"
  register: registration_command_encoded
  when:
    - agent_check.status is not defined or agent_check.status.ActiveState != "active"
    - master_reg_file.stat.exists | default(false)

- name: Decode registration command
  set_fact:
    registration_command: "{{ registration_command_encoded.content | b64decode | trim }}"
  when:
    - agent_check.status is not defined or agent_check.status.ActiveState != "active"
    - registration_command_encoded is defined
    - registration_command_encoded is not skipped

- name: Display registration command for debugging
  debug:
    msg: "Will execute: {{ registration_command }}"
  when:
    - agent_check.status is not defined or agent_check.status.ActiveState != "active"
    - registration_command is defined

- name: Execute Rancher registration command with full output
  shell: |
    set -o pipefail
    {{ registration_command }} 2>&1 | tee /tmp/rancher-registration.log
  args:
    executable: /bin/bash
  environment:
    DEBIAN_FRONTEND: noninteractive
  become: yes
  when:
    - agent_check.status is not defined or agent_check.status.ActiveState != "active"
    - registration_command is defined
    - registration_command != ""
  register: registration_result

- name: Display registration output
  debug:
    var: registration_result.stdout_lines
  when:
    - registration_result is defined
    - registration_result.stdout_lines is defined

- name: Wait for system-agent service to be created
  systemd:
    name: rancher-system-agent
    daemon_reload: yes
  register: service_check
  until: service_check is succeeded
  retries: 30
  delay: 10
  when: agent_check.status is not defined or agent_check.status.ActiveState != "active"

- name: Display registration result
  debug:
    msg:
      - "Worker node successfully registered with Rancher!"
      - "Rancher system-agent is running"
  when: service_check is succeeded or (agent_check.status is defined and agent_check.status.ActiveState == "active")
