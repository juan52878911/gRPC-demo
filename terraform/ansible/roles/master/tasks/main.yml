---
- name: Ensure Rancher data directory exists
  file:
    path: "{{ rancher_data_dir }}"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Check if Rancher container is already running
  docker_container_info:
    name: "{{ rancher_container_name }}"
  register: rancher_container
  ignore_errors: true

- name: Deploy Rancher container
  docker_container:
    name: "{{ rancher_container_name }}"
    image: "rancher/rancher:{{ rancher_version }}"
    state: started
    restart_policy: unless-stopped
    privileged: true
    ports:
      - "{{ rancher_http_port }}:80"
      - "{{ rancher_https_port }}:443"
    volumes:
      - "{{ rancher_data_dir }}:/var/lib/rancher"
  when: rancher_container.exists == false

- name: Wait for Rancher to be ready
  uri:
    url: "https://{{ ansible_host }}/ping"
    method: GET
    validate_certs: no
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 5

- name: Wait additional time for Rancher to fully initialize
  pause:
    seconds: 30

- name: Get Rancher bootstrap password
  shell: docker logs {{ rancher_container_name }} 2>&1 | grep "Bootstrap Password:" | awk '{print $NF}'
  register: bootstrap_password
  changed_when: false

- name: Save bootstrap password to file
  copy:
    content: "{{ bootstrap_password.stdout }}"
    dest: "{{ rancher_password_file }}"
    owner: ubuntu
    group: ubuntu
    mode: '0600'
  when: bootstrap_password.stdout != ""

- name: Display Rancher access information
  debug:
    msg:
      - "==========================================="
      - "Rancher is ready!"
      - "URL: https://{{ ansible_host }}"
      - "Bootstrap Password: {{ bootstrap_password.stdout }}"
      - "==========================================="
  when: bootstrap_password.stdout != ""

- name: Wait for Rancher API to be available (check via ping)
  uri:
    url: "https://{{ ansible_host }}/ping"
    method: GET
    validate_certs: no
    status_code: 200
    return_content: yes
  register: api_result
  until: api_result.status == 200 and api_result.content == "pong"
  retries: 30
  delay: 10

- name: Verify Rancher is fully initialized
  uri:
    url: "https://{{ ansible_host }}/v3"
    method: GET
    validate_certs: no
    status_code: [200, 401]
  register: v3_check
  until: v3_check.status in [200, 401]
  retries: 10
  delay: 5

- name: Display Rancher API status
  debug:
    msg: "Rancher API is responding (status: {{ v3_check.status }})"

# ============================================
# Automatic Cluster Creation and Registration
# ============================================

- name: Check if password was already changed
  uri:
    url: "https://{{ ansible_host }}/v3-public/localProviders/local?action=login"
    method: POST
    validate_certs: no
    body_format: json
    body:
      username: "admin"
      password: "{{ rancher_admin_password }}"
    status_code: [201, 401]
  register: configured_login_check
  ignore_errors: yes

- name: Login and change password (first time setup)
  block:
    - name: Login with bootstrap password
      uri:
        url: "https://{{ ansible_host }}/v3-public/localProviders/local?action=login"
        method: POST
        validate_certs: no
        body_format: json
        body:
          username: "admin"
          password: "{{ bootstrap_password.stdout }}"
        status_code: [201]
      register: bootstrap_login

    - name: Change admin password
      uri:
        url: "https://{{ ansible_host }}/v3/users?action=changepassword"
        method: POST
        validate_certs: no
        headers:
          Authorization: "Bearer {{ bootstrap_login.json.token }}"
        body_format: json
        body:
          currentPassword: "{{ bootstrap_password.stdout }}"
          newPassword: "{{ rancher_admin_password }}"
        status_code: [200]

    - name: Login with new password
      uri:
        url: "https://{{ ansible_host }}/v3-public/localProviders/local?action=login"
        method: POST
        validate_certs: no
        body_format: json
        body:
          username: "admin"
          password: "{{ rancher_admin_password }}"
        status_code: [201]
      register: final_login

    - name: Save API token
      set_fact:
        rancher_api_token: "{{ final_login.json.token }}"

  when: configured_login_check.status == 401

- name: Use existing configured password (already setup)
  set_fact:
    rancher_api_token: "{{ configured_login_check.json.token }}"
  when: configured_login_check.status == 201

- name: Set server URL
  uri:
    url: "https://{{ ansible_host }}/v3/settings/server-url"
    method: PUT
    validate_certs: no
    headers:
      Authorization: "Bearer {{ rancher_api_token }}"
    body_format: json
    body:
      name: "server-url"
      value: "https://{{ ansible_host }}"
    status_code: [200]

- name: Check if custom cluster already exists
  uri:
    url: "https://{{ ansible_host }}/v3/clusters?name={{ rancher_cluster_name }}"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ rancher_api_token }}"
    status_code: [200]
  register: existing_cluster_check

- name: Create custom cluster for manual node registration (if not exists)
  uri:
    url: "https://{{ ansible_host }}/v3/cluster"
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ rancher_api_token }}"
    body_format: json
    body:
      type: "cluster"
      name: "{{ rancher_cluster_name }}"
      description: "{{ rancher_cluster_description }} - Nodes will run K3s"
      labels: "{{ rancher_cluster_labels }}"
      annotations: "{{ rancher_cluster_annotations }}"
    status_code: [201]
  register: cluster_create_response
  when: existing_cluster_check.json.data | length == 0

- name: Extract cluster ID from existing cluster
  set_fact:
    cluster_id: "{{ existing_cluster_check.json.data[0].id }}"
  when: existing_cluster_check.json.data | length > 0

- name: Extract cluster ID from new cluster
  set_fact:
    cluster_id: "{{ cluster_create_response.json.id }}"
  when: existing_cluster_check.json.data | length == 0

- name: Display cluster status
  debug:
    msg: "{{ 'Using existing' if existing_cluster_check.json.data | length > 0 else 'Created new' }} custom cluster: {{ rancher_cluster_name }} (ID: {{ cluster_id }})"

- name: Wait for cluster registration token to be auto-created
  uri:
    url: "https://{{ ansible_host }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ rancher_api_token }}"
    status_code: [200]
  register: token_list_response
  until: token_list_response.json.data | length > 0
  retries: 30
  delay: 10

- name: Get the registration token details
  uri:
    url: "{{ token_list_response.json.data[0].links.self }}"
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ rancher_api_token }}"
    status_code: [200]
  register: token_response
  until: token_response.json.insecureNodeCommand is defined and token_response.json.insecureNodeCommand != ""
  retries: 30
  delay: 5

- name: Extract registration command (insecure for self-signed certs)
  set_fact:
    registration_command: "{{ token_response.json.insecureNodeCommand }}"

- name: Add all roles to registration command (etcd, controlplane, worker)
  set_fact:
    registration_command: "{{ registration_command }} --etcd --controlplane --worker"

- name: Save registration command to file
  copy:
    content: "{{ registration_command }}"
    dest: "{{ rancher_registration_file }}"
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Display cluster information
  debug:
    msg:
      - "==========================================="
      - "Registration token created successfully!"
      - "Cluster ID: {{ cluster_id }}"
      - "Registration command saved to: {{ rancher_registration_file }}"
      - "Workers will be registered automatically"
      - "==========================================="
